#!/usr/bin/python
# Author: David Erickson
# Date: 10/31/07

import netfpga;
import os;
import signal;
import sys;
import time;

# Move the working directory to the scone dir
os.chdir("../../sw");
# Build the full path to the scone executable
scone = os.getcwd() + "/scone";

# Get a dictionary of the available NETFPGA registers
reg_dict = netfpga.parseRegisterDefines(["../../reference_router/lib/C/reg_defines_reference_router.h", "../../../lib/C/common/nf2.h"]);

# Reset the NETFPGA Hardware
netfpga.writeReg(reg_dict["CPCI_REG_CTRL"], 0x00010100);
time.sleep(2);

# Start SCONE
pid = os.spawnvp(os.P_NOWAIT, scone, [scone, '-r', 'rtable.regress1']);
time.sleep(3);

# Expected Static Routes
# 192.168.1.1 192.168.1.1 255.255.255.0 eth1
route1 = {"ip":"0xC0A80101L", "gw":"0xC0A80101L", "mask":"0xFFFFFF00L", "port":"0x4L"};
# 0.0.0.0 192.168.0.1 0.0.0.0 eth0
route2 = {"ip":"0x0L", "gw":"0xC0A80001L", "mask":"0x0L", "port":"0x1L"};
expectedRoutes = [route1, route2];

# Check IP Filter 0
for i in range(32):
	netfpga.writeReg(reg_dict["ROUTER_OP_LUT_ROUTE_TABLE_RD_ADDR_REG"], i);
	ip = netfpga.readReg(reg_dict["ROUTER_OP_LUT_ROUTE_TABLE_ENTRY_IP_REG"]);
	mask = netfpga.readReg(reg_dict["ROUTER_OP_LUT_ROUTE_TABLE_ENTRY_MASK_REG"]);
	gw = netfpga.readReg(reg_dict["ROUTER_OP_LUT_ROUTE_TABLE_ENTRY_NEXT_HOP_IP_REG"]);
	port = netfpga.readReg(reg_dict["ROUTER_OP_LUT_ROUTE_TABLE_ENTRY_OUTPUT_PORT_REG"]);

	found = -1;
	for route in expectedRoutes:
		if ((route["ip"] == hex(ip)) and (route["gw"] == hex(gw)) and (route["mask"] == hex(mask)) and (route["port"] == hex(port))):
			found = expectedRoutes.index(route);
			break;
	if (found != -1):
		expectedRoutes.pop(found);

# Kill SCONE
os.kill(pid, signal.SIGKILL);

if (len(expectedRoutes) > 0):
	print "Failed to find the following routes: ";
	for route in expectedRoutes:
		print route["ip"] + " " + route["gw"] + " " + route["mask"] + " " + route["port"];
	sys.exit(1);


